prior_sd_lambda <- sqrt( (9.21604)**2 / ((3.48681 - 1)**2 * (3.48681 - 1)) )
z_score_lambda <- abs((post_mean_lambda - simu_lambda) / post_sd_lambda)
shrinkage_lambda <- 1 - (post_sd_lambda / prior_sd_lambda)**2
s <- summary(fit, probs = c(), pars='theta')$summary
post_mean_theta <- s[,1]
post_sd_theta <- s[,3]
prior_sd_theta <- sqrt( (2.8663)**2 / (4 * (2.8663)**2 * (2 * 2.8663 + 1)) )
z_score_theta <- abs((post_mean_theta - simu_theta) / post_sd_theta)
shrinkage_theta <- 1 - (post_sd_theta / prior_sd_theta)**2
c(warning_code,
sbc_rank_lambda, z_score_lambda, shrinkage_lambda,
sbc_rank_theta, z_score_theta, shrinkage_theta)
}
}, finally={ stopImplicitCluster() })
# Check for fit diagnostics
warning_code <- ensemble_output[1,]
if (sum(warning_code) != 0) {
print ("Some simulated posterior fits in the generative ensemble encountered problems!")
for (r in 1:R) {
if (warning_code[r] != 0) {
print(sprintf('Replication %s of %s', r, R))
util$parse_warning_code(warning_code[r])
print(sprintf('Simulated lambda = %s', simu_lambdas[r]))
print(sprintf('Simulated theta = %s', simu_thetas[r]))
print(" ")
}
}
} else {
print ("No posterior fits in the generative ensemble encountered problems!")
}
# Check SBC histogram
sbc_rank <- ensemble_output[2,]
sbc_hist <- hist(sbc_rank, seq(0, 500, 25) - 0.5, col=c_dark, border=c_dark_highlight)
plot(sbc_hist, main="", xlab="Prior Rank (Lambda)", yaxt='n', ylab="")
low <- qbinom(0.005, R, 1 / 20)
mid <- qbinom(0.5, R, 1 / 20)
high <- qbinom(0.995, R, 1 / 20)
bar_x <- c(-10, 510, 500, 510, -10, 0, -10)
bar_y <- c(high, high, mid, low, low, mid, high)
polygon(bar_x, bar_y, col=c("#DDDDDD"), border=NA)
segments(x0=0, x1=500, y0=mid, y1=mid, col=c("#999999"), lwd=2)
plot(sbc_hist, col=c_dark, border=c_dark_highlight, add=T)
sbc_rank <- ensemble_output[5,]
sbc_hist <- hist(sbc_rank, seq(0, 500, 25) - 0.5, col=c_dark, border=c_dark_highlight)
plot(sbc_hist, main="", xlab="Prior Rank (Lambda)", yaxt='n', ylab="")
low <- qbinom(0.005, R, 1 / 20)
# Check SBC histogram
sbc_rank <- ensemble_output[2,]
sbc_hist <- hist(sbc_rank, seq(0, 500, 25) - 0.5, col=c_dark, border=c_dark_highlight)
plot(sbc_hist, main="", xlab="Prior Rank (Lambda)", yaxt='n', ylab="")
low <- qbinom(0.005, R, 1 / 20)
mid <- qbinom(0.5, R, 1 / 20)
high <- qbinom(0.995, R, 1 / 20)
bar_x <- c(-10, 510, 500, 510, -10, 0, -10)
bar_y <- c(high, high, mid, low, low, mid, high)
polygon(bar_x, bar_y, col=c("#DDDDDD"), border=NA)
segments(x0=0, x1=500, y0=mid, y1=mid, col=c("#999999"), lwd=2)
plot(sbc_hist, col=c_dark, border=c_dark_highlight, add=T)
sbc_rank <- ensemble_output[5,]
sbc_hist <- hist(sbc_rank, seq(0, 500, 25) - 0.5, col=c_dark, border=c_dark_highlight)
plot(sbc_hist, main="", xlab="Prior Rank (Lambda)", yaxt='n', ylab="")
low <- qbinom(0.005, R, 1 / 20)
mid <- qbinom(0.5, R, 1 / 20)
high <- qbinom(0.995, R, 1 / 20)
bar_x <- c(-10, 510, 500, 510, -10, 0, -10)
bar_y <- c(high, high, mid, low, low, mid, high)
polygon(bar_x, bar_y, col=c("#DDDDDD"), border=NA)
segments(x0=0, x1=500, y0=mid, y1=mid, col=c("#999999"), lwd=2)
plot(sbc_hist, col=c_dark, border=c_dark_highlight, add=T)
# Plot posterior sensitivities
z_score <- ensemble_output[3,]
shrinkage <- ensemble_output[4,]
plot(shrinkage, z_score, col=c("#8F272720"), lwd=2, pch=16, cex=0.8, main="Lambda",
xlim=c(0, 1), xlab="Posterior Shrinkage", ylim=c(0, 5), ylab="Posterior z-Score")
z_score <- ensemble_output[6,]
shrinkage <- ensemble_output[7,]
# Plot posterior sensitivities
z_score <- ensemble_output[3,]
shrinkage <- ensemble_output[4,]
plot(shrinkage, z_score, col=c("#8F272720"), lwd=2, pch=16, cex=0.8, main="Lambda",
xlim=c(0, 1), xlab="Posterior Shrinkage", ylim=c(0, 5), ylab="Posterior z-Score")
z_score <- ensemble_output[6,]
shrinkage <- ensemble_output[7,]
plot(shrinkage, z_score, col=c("#8F272720"), lwd=2, pch=16, cex=0.8, main="Theta",
xlim=c(0, 1), xlab="Posterior Shrinkage", ylim=c(0, 5), ylab="Posterior z-Score")
input_data <- read_rdump('workflow.data.R')
fit <- stan(file='fit_data2_ppc.stan', data=input_data, seed=4938483)
# Check diagnostics
util$check_all_diagnostics(fit)
# Plot marginal posterior
params = extract(fit)
par(mfrow=c(2, 1))
hist(params$lambda, main="", xlab="lambda", yaxt='n', ylab="",
col=c_dark, border=c_dark_highlight)
hist(params$theta, main="", xlab="theta", yaxt='n', ylab="",
col=c_dark, border=c_dark_highlight)
B <- 30
obs_counts <- hist(input_data$y, breaks=(0:(B + 1))-0.5, plot=FALSE)$counts
idx <- rep(0:B, each=2)
x <- sapply(1:length(idx), function(b) if(b %% 2 == 0) idx[b] + 0.5 else idx[b] - 0.5)
pad_obs <- do.call(cbind, lapply(idx, function(n) obs_counts[n + 1]))
counts <- sapply(1:4000, function(n) hist(params$y_ppc[n,], breaks=(0:(B + 1))-0.5, plot=FALSE)$counts)
probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
cred <- sapply(1:(B + 1), function(b) quantile(counts[b,], probs=probs))
pad_cred <- do.call(cbind, lapply(idx, function(n) cred[1:9,n + 1]))
plot(1, type="n", main="Posterior Predictive Distribution",
xlim=c(-0.5, B + 0.5), xlab="y",
ylim=c(0, max(c(obs_counts, cred[9,]))), ylab="")
polygon(c(x, rev(x)), c(pad_cred[1,], rev(pad_cred[9,])),
col = c_light, border = NA)
polygon(c(x, rev(x)), c(pad_cred[2,], rev(pad_cred[8,])),
col = c_light_highlight, border = NA)
polygon(c(x, rev(x)), c(pad_cred[3,], rev(pad_cred[7,])),
col = c_mid, border = NA)
polygon(c(x, rev(x)), c(pad_cred[4,], rev(pad_cred[6,])),
col = c_mid_highlight, border = NA)
lines(x, pad_cred[5,], col=c_dark, lwd=2)
lines(x, pad_obs, col="white", lty=1, lw=2.5)
lines(x, pad_obs, col="black", lty=1, lw=2)
B <- 30
obs_counts <- hist(input_data$y, breaks=(0:(B + 1))-0.5, plot=FALSE)$counts
idx <- rep(0:B, each=2)
x <- sapply(1:length(idx), function(b) if(b %% 2 == 0) idx[b] + 0.5 else idx[b] - 0.5)
pad_obs <- do.call(cbind, lapply(idx, function(n) obs_counts[n + 1]))
counts <- sapply(1:4000, function(n) hist(params$y_ppc[n,], breaks=(0:(B + 1))-0.5, plot=FALSE)$counts)
probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
cred <- sapply(1:(B + 1), function(b) quantile(counts[b,], probs=probs))
pad_cred <- do.call(cbind, lapply(idx, function(n) cred[1:9,n + 1]))
plot(1, type="n", main="Posterior Predictive Distribution",
xlim=c(-0.5, B + 0.5), xlab="y",
ylim=c(0, max(c(obs_counts, cred[9,]))), ylab="")
polygon(c(x, rev(x)), c(pad_cred[1,], rev(pad_cred[9,])),
col = c_light, border = NA)
polygon(c(x, rev(x)), c(pad_cred[2,], rev(pad_cred[8,])),
col = c_light_highlight, border = NA)
polygon(c(x, rev(x)), c(pad_cred[3,], rev(pad_cred[7,])),
col = c_mid, border = NA)
polygon(c(x, rev(x)), c(pad_cred[4,], rev(pad_cred[6,])),
col = c_mid_highlight, border = NA)
lines(x, pad_cred[5,], col=c_dark, lwd=2)
lines(x, pad_obs, col="white", lty=1, lw=2.5)
lines(x, pad_obs, col="black", lty=1, lw=2)
input_data <- read_rdump('workflow.data.R')
fit <- stan(file='fit_data3_ppc.stan', data=input_data, seed=4938483)
# Check diagnostics
util$check_all_diagnostics(fit)
# Plot marginal posterior
params = extract(fit)
par(mfrow=c(2, 1))
hist(params$lambda, main="", xlab="lambda", yaxt='n', ylab="",
col=c_dark, border=c_dark_highlight)
hist(params$theta, main="", xlab="theta", yaxt='n', ylab="",
col=c_dark, border=c_dark_highlight)
B <- 20
obs_counts <- hist(input_data$y, breaks=(0:(B + 1))-0.5, plot=FALSE)$counts
idx <- rep(0:B, each=2)
x <- sapply(1:length(idx), function(b) if(b %% 2 == 0) idx[b] + 0.5 else idx[b] - 0.5)
pad_obs <- do.call(cbind, lapply(idx, function(n) obs_counts[n + 1]))
counts <- sapply(1:4000, function(n) hist(params$y_ppc[n,], breaks=(0:(B + 1))-0.5, plot=FALSE)$counts)
probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
cred <- sapply(1:(B + 1), function(b) quantile(counts[b,], probs=probs))
pad_cred <- do.call(cbind, lapply(idx, function(n) cred[1:9,n + 1]))
plot(1, type="n", main="Posterior Predictive Distribution",
xlim=c(-0.5, B + 0.5), xlab="y",
ylim=c(0, max(c(obs_counts, cred[9,]))), ylab="")
polygon(c(x, rev(x)), c(pad_cred[1,], rev(pad_cred[9,])),
col = c_light, border = NA)
polygon(c(x, rev(x)), c(pad_cred[2,], rev(pad_cred[8,])),
col = c_light_highlight, border = NA)
polygon(c(x, rev(x)), c(pad_cred[3,], rev(pad_cred[7,])),
col = c_mid, border = NA)
polygon(c(x, rev(x)), c(pad_cred[4,], rev(pad_cred[6,])),
col = c_mid_highlight, border = NA)
lines(x, pad_cred[5,], col=c_dark, lwd=2)
lines(x, pad_obs, col="white", lty=1, lw=2.5)
lines(x, pad_obs, col="black", lty=1, lw=2)
B <- 20
obs_counts <- hist(input_data$y, breaks=(0:(B + 1))-0.5, plot=FALSE)$counts
idx <- rep(0:B, each=2)
x <- sapply(1:length(idx), function(b) if(b %% 2 == 0) idx[b] + 0.5 else idx[b] - 0.5)
pad_obs <- do.call(cbind, lapply(idx, function(n) obs_counts[n + 1]))
counts <- sapply(1:4000, function(n) hist(params$y_ppc[n,], breaks=(0:(B + 1))-0.5, plot=FALSE)$counts)
probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
cred <- sapply(1:(B + 1), function(b) quantile(counts[b,], probs=probs))
pad_cred <- do.call(cbind, lapply(idx, function(n) cred[1:9,n + 1]))
plot(1, type="n", main="Posterior Predictive Distribution",
xlim=c(-0.5, B + 0.5), xlab="y",
ylim=c(0, max(c(obs_counts, cred[9,]))), ylab="")
polygon(c(x, rev(x)), c(pad_cred[1,], rev(pad_cred[9,])),
col = c_light, border = NA)
polygon(c(x, rev(x)), c(pad_cred[2,], rev(pad_cred[8,])),
col = c_light_highlight, border = NA)
polygon(c(x, rev(x)), c(pad_cred[3,], rev(pad_cred[7,])),
col = c_mid, border = NA)
polygon(c(x, rev(x)), c(pad_cred[4,], rev(pad_cred[6,])),
col = c_mid_highlight, border = NA)
lines(x, pad_cred[5,], col=c_dark, lwd=2)
lines(x, pad_obs, col="white", lty=1, lw=2.5)
lines(x, pad_obs, col="black", lty=1, lw=2)
setwd('/Users/Betancourt/Documents/Research/Courses/2018.09.10 Potsdam Summer School/exercises/day4/6 - hierarchical_regression')
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
util <- new.env()
source('stan_utility.R', local=util)
c_light <- c("#DCBCBC")
c_light_highlight <- c("#C79999")
c_mid <- c("#B97C7C")
c_mid_highlight <- c("#A25050")
c_dark <- c("#8F2727")
c_dark_highlight <- c("#7C0000")
c_dark_trans <- c("#8F272780")
c_green_trans <- c("#00FF0080")
data <- read_rdump('strong.data.R')
# Any better with a higher adapt_delta? A little --
# we explore deeper into the funnel but not completely.
fit <- stan(file='hierarchical_ncp.stan', data=data, seed=4938483,
control=list(adapt_delta=0.99, max_treedepth=15))
util$check_all_diagnostics(fit)
util$check_all_diagnostics(fit, 15)
util$check_all_diagnostics(fit, quiet=FALSE, 15)
util$check_treedepth(fit, 15)
partition <- util$partition_div(fit)
div_params <- partition[[1]]
nondiv_params <- partition[[2]]
plot(nondiv_params$"theta_tilde[1]", log(nondiv_params$tau),
col=c_dark_trans, pch=16, cex=0.8,
xlab="theta_tilde[1]", ylab="log(tau)")
points(div_params$"theta_tilde[1]", log(div_params$tau),
col=c_green_trans, pch=16, cex=0.8)
N <- 10
sigma <- 0.01
fit <- stan(file='generate_data.stan', iter=1, chains=1, seed=194838,
data=c("N", "sigma"), algorithm="Fixed_param")
y <- extract(fit)$y[1,]
stan_rdump(c("N", "y", "sigma"), file="strong.data.R")
data <- read_rdump('strong.data.R')
fit <- stan(file='hierarchical_ncp.stan', data=data, seed=4938483)
# Divergences concentrate where the chain is
# getting stuck at small values of sigma_beta
traceplot(fit, pars=c("tau"))
partition <- util$partition_div(fit)
div_params <- partition[[1]]
nondiv_params <- partition[[2]]
c_dark_trans <- c("#8F272780")
c_green_trans <- c("#00FF0080")
plot(nondiv_params$"theta[1]", log(nondiv_params$tau),
col=c_dark_trans, pch=16, cex=0.8,
xlab="theta[1]", ylab="log(tau)")
points(div_params$"theta[1]", log(div_params$tau),
col=c_green_trans, pch=16, cex=0.8)
# Plot marginal posteriors
params = extract(fit)
hist(params$tau, main="", xlab="tau", yaxt='n', ylab="",
col=c_dark, border=c_dark_highlight)
N <- data$N + 1
idx <- rep(1:N, each=2)
x <- sapply(1:length(idx), function(m) if(m %% 2 == 0) idx[m] + 0.5 else idx[m] - 0.5)
probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
cred <- sapply(1:data$N, function(n) quantile(params$theta[,n], probs=probs))
cred <- cbind(cred, quantile(params$mu, probs=probs))
pad_cred <- do.call(cbind, lapply(idx, function(n) cred[1:9,n]))
plot(1, type="n", main="",
xlim=c(0.5, N + 0.5), xlab="",
ylim=c(min(pad_cred[1,]), max(pad_cred[9,])), ylab="Marginal Posteriors")
abline(v=N-0.5, col="gray80", lwd=2, lty=3)
polygon(c(x, rev(x)), c(pad_cred[1,], rev(pad_cred[9,])),
col = c_light, border = NA)
polygon(c(x, rev(x)), c(pad_cred[2,], rev(pad_cred[8,])),
col = c_light_highlight, border = NA)
polygon(c(x, rev(x)), c(pad_cred[3,], rev(pad_cred[7,])),
col = c_mid, border = NA)
polygon(c(x, rev(x)), c(pad_cred[4,], rev(pad_cred[6,])),
col = c_mid_highlight, border = NA)
lines(x, pad_cred[5,], col=c_dark, lwd=2)
get_sampler_params(fit, inc_warmup=FALSE)
dims(get_sampler_params(fit, inc_warmup=FALSE))
dim(get_sampler_params(fit, inc_warmup=FALSE))
length(get_sampler_params(fit, inc_warmup=FALSE))
setwd('/Users/Betancourt/Documents/Research/Courses/2018.09.10 Potsdam Summer School/exercises/day4/6 - hierarchical_regression')
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
util <- new.env()
source('stan_utility.R', local=util)
c_light <- c("#DCBCBC")
c_light_highlight <- c("#C79999")
c_mid <- c("#B97C7C")
c_mid_highlight <- c("#A25050")
c_dark <- c("#8F2727")
c_dark_highlight <- c("#7C0000")
c_dark_trans <- c("#8F272780")
c_green_trans <- c("#00FF0080")
N <- 10
sigma <- 0.1
fit <- stan(file='generate_data.stan', iter=1, chains=1, seed=194838,
data=c("N", "sigma"), algorithm="Fixed_param")
y <- extract(fit)$y[1,]
stan_rdump(c("N", "y", "sigma"), file="strong.data.R")
sigma <- 10
fit <- stan(file='generate_data.stan', iter=1, chains=1, seed=194838,
data=c("N", "sigma"), algorithm="Fixed_param")
y <- extract(fit)$y[1,]
stan_rdump(c("N", "y", "sigma"), file="weak.data.R")
data <- read_rdump('strong.data.R')
cp_fit <- stan(file='hierarchical_cp.stan', data=data,
iter=11000, warmup=1000, seed=4938483)
# Check diagnostics
util$check_all_diagnostics(cp_fit)
# Plot marginal posteriors
cp_params = extract(cp_fit)
hist(cp_params$tau, main="", xlab="tau", yaxt='n', ylab="",
col=c_dark, border=c_dark_highlight)
N <- data$N + 1
idx <- rep(1:N, each=2)
x <- sapply(1:length(idx), function(m) if(m %% 2 == 0) idx[m] + 0.5 else idx[m] - 0.5)
probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
cred <- sapply(1:data$N, function(n) quantile(params$theta[,n], probs=probs))
cred <- cbind(cred, quantile(cp_params$mu, probs=probs))
pad_cred <- do.call(cbind, lapply(idx, function(n) cred[1:9,n]))
plot(1, type="n", main="",
xlim=c(0.5, N + 0.5), xlab="",
ylim=c(min(pad_cred[1,]), max(pad_cred[9,])), ylab="Marginal Posteriors")
abline(v=N-0.5, col="gray80", lwd=2, lty=3)
polygon(c(x, rev(x)), c(pad_cred[1,], rev(pad_cred[9,])),
col = c_light, border = NA)
polygon(c(x, rev(x)), c(pad_cred[2,], rev(pad_cred[8,])),
col = c_light_highlight, border = NA)
polygon(c(x, rev(x)), c(pad_cred[3,], rev(pad_cred[7,])),
col = c_mid, border = NA)
polygon(c(x, rev(x)), c(pad_cred[4,], rev(pad_cred[6,])),
col = c_mid_highlight, border = NA)
lines(x, pad_cred[5,], col=c_dark, lwd=2)
# Check PPCs
N <- data$N
idx <- rep(1:N, each=2)
x <- sapply(1:length(idx), function(m) if(m %% 2 == 0) idx[m] + 0.5 else idx[m] - 0.5)
probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
cred <- sapply(1:data$N, function(n) quantile(cp_params$y_ppc[,n], probs=probs))
pad_cred <- do.call(cbind, lapply(idx, function(n) cred[1:9,n]))
plot(1, type="n", main="",
xlim=c(0.5, N + 0.5), xlab="",
ylim=c(min(pad_cred[1,]), max(pad_cred[9,])), ylab="Marginal Posteriors")
polygon(c(x, rev(x)), c(pad_cred[1,], rev(pad_cred[9,])),
col = c_light, border = NA)
polygon(c(x, rev(x)), c(pad_cred[2,], rev(pad_cred[8,])),
col = c_light_highlight, border = NA)
polygon(c(x, rev(x)), c(pad_cred[3,], rev(pad_cred[7,])),
col = c_mid, border = NA)
polygon(c(x, rev(x)), c(pad_cred[4,], rev(pad_cred[6,])),
col = c_mid_highlight, border = NA)
lines(x, pad_cred[5,], col=c_dark, lwd=2)
pad_obs <- do.call(cbind, lapply(idx, function(n) data$y[n]))
lines(x, pad_obs, lwd=1.5, col="white")
lines(x, pad_obs, lwd=1.25, col="black")
ncp_fit <- stan(file='hierarchical_ncp.stan', data=data, seed=4938483,
iter=11000, warmup=1000, refresh=11000)
# Check diagnostics
util$check_all_diagnostics(fit_ncp)
# Check diagnostics
util$check_all_diagnostics(ncp_fit)
# Let's look at some marginal posterior correlations
# to see what the non-centered posterior looks like
ncp_params = extract(ncp_fit)
plot(ncp_params$"theta[1]", log(ncp_params$tau),
col=c_dark_trans, pch=16, cex=0.8,
xlab="theta[1]", ylab="log(tau)")
length(log(ncp_params$tau))
lenghth(ncp_params$"theta[1]")
length(ncp_params$"theta[1]")
names(ncp_params)
length(ncp_params$theta[1])
length(ncp_params$theta)
dim(ncp_params$theta)
dim(ncp_params$theta[,1])
length(ncp_params$theta[,1])
plot(ncp_params$theta[,1], log(ncp_params$tau),
col=c_dark_trans, pch=16, cex=0.8,
xlab="theta[1]", ylab="log(tau)")
plot(ncp_params$theta_tilde[,1], log(ncp_params$tau),
col=c_dark_trans, pch=16, cex=0.8,
xlab="theta_tilde[1]", ylab="log(tau)")
plot(ncp_params$"mu", log(ncp_params$tau),
col=c_dark_trans, pch=16, cex=0.8,
xlab="mu", ylab="log(tau)")
# Now let's compare performance
get_sampler_params(cp_fit, inc_warmup=FALSE)[[1]][,'stepsize__'][1]
get_sampler_params(ncp_fit, inc_warmup=FALSE)[[1]][,'stepsize__'][1]
cp_steps <- do.call(rbind, get_sampler_params(cp_fit, inc_warmup=FALSE))[,'n_leapfrog__']
hist(cp_steps, breaks=0:2000-0.5, main="",
col=c_dark, border=c_dark_highlight,
xlab="Number of Leapfrog Steps", yaxt='n', ylab="")
ncp_steps <- do.call(rbind, get_sampler_params(ncp_fit, inc_warmup=FALSE))[,'n_leapfrog__']
hist(ncp_steps, breaks=0:2000-0.5,
col=c_light, border=c_light_highlight, add=T)
max(cp_steps)
max(ncp_steps)
cp_steps <- do.call(rbind, get_sampler_params(cp_fit, inc_warmup=FALSE))[,'n_leapfrog__']
hist(cp_steps, breaks=0:700-0.5, main="",
col=c_dark, border=c_dark_highlight,
xlab="Number of Leapfrog Steps", yaxt='n', ylab="")
ncp_steps <- do.call(rbind, get_sampler_params(ncp_fit, inc_warmup=FALSE))[,'n_leapfrog__']
hist(ncp_steps, breaks=0:700-0.5,
col=c_light, border=c_light_highlight, add=T)
data <- read_rdump('weak.data.R')
cp_fit <- stan(file='hierarchical_cp.stan', data=data, seed=4938483,
iter=11000, warmup=1000, refresh=11000)
# Check diagnostics
util$check_all_diagnostics(cp_fit)
# Divergences concentrate where the chain is
# getting stuck at small values of sigma_beta
traceplot(cp_fit, pars=c("tau"))
partition <- util$partition_div(cp_fit)
div_params <- partition[[1]]
nondiv_params <- partition[[2]]
plot(nondiv_params$theta[,1], log(nondiv_params$tau),
col=c_dark_trans, pch=16, cex=0.8,
xlab="theta[1]", ylab="log(tau)")
points(div_params$"theta[1]", log(div_params$tau),
col=c_green_trans, pch=16, cex=0.8)
plot(nondiv_params$theta[,1], log(nondiv_params$tau),
col=c_dark_trans, pch=16, cex=0.8,
xlab="theta[1]", ylab="log(tau)")
length(nondiv_params$theta[,1])
names(nondiv_params)
plot(nondiv_params$"theta[1]", log(nondiv_params$tau),
col=c_dark_trans, pch=16, cex=0.8,
xlab="theta[1]", ylab="log(tau)")
points(div_params$"theta[1]", log(div_params$tau),
col=c_green_trans, pch=16, cex=0.8)
# Any better with a higher adapt_delta? A little --
# we explore deeper into the funnel but not completely.
fit <- stan(file='hierarchical_cp.stan', data=data, seed=4938483,
control=list(adapt_delta=0.99))
util$check_all_diagnostics(fit)
partition <- util$partition_div(fit)
cp_fit <- fit
util$check_all_diagnostics(cp_fit)
partition <- util$partition_div(cp_fit)
div_params <- partition[[1]]
nondiv_params <- partition[[2]]
plot(nondiv_params$"theta[1]", log(nondiv_params$tau),
col=c_dark_trans, pch=16, cex=0.8,
xlab="theta[1]", ylab="log(tau)")
points(div_params$"theta[1]", log(div_params$tau),
col=c_green_trans, pch=16, cex=0.8)
cp_params <- extract(cp_fit)
fit <- stan(file='hierarchical_ncp.stan', data=data, seed=4938483,
iter=11000, warmup=1000, refresh=11000)
ncp_fit <- fit
# Check diagnostics
util$check_all_diagnostics(ncp_fit)
# Plot marginal posteriors
ncp_params = extract(ncp_fit)
hist(ncp_params$tau, main="", xlab="tau", yaxt='n', ylab="",
col=c_dark, border=c_dark_highlight)
N <- data$N + 1
idx <- rep(1:N, each=2)
x <- sapply(1:length(idx), function(m) if(m %% 2 == 0) idx[m] + 0.5 else idx[m] - 0.5)
probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
cred <- sapply(1:data$N, function(n) quantile(ncp_params$theta[,n], probs=probs))
cred <- cbind(cred, quantile(ncp_params$mu, probs=probs))
pad_cred <- do.call(cbind, lapply(idx, function(n) cred[1:9,n]))
plot(1, type="n", main="",
xlim=c(0.5, N + 0.5), xlab="",
ylim=c(min(pad_cred[1,]), max(pad_cred[9,])), ylab="Marginal Posteriors")
abline(v=N-0.5, col="gray80", lwd=2, lty=3)
polygon(c(x, rev(x)), c(pad_cred[1,], rev(pad_cred[9,])),
col = c_light, border = NA)
polygon(c(x, rev(x)), c(pad_cred[2,], rev(pad_cred[8,])),
col = c_light_highlight, border = NA)
polygon(c(x, rev(x)), c(pad_cred[3,], rev(pad_cred[7,])),
col = c_mid, border = NA)
polygon(c(x, rev(x)), c(pad_cred[4,], rev(pad_cred[6,])),
col = c_mid_highlight, border = NA)
lines(x, pad_cred[5,], col=c_dark, lwd=2)
# Check PPCs
N <- data$N
idx <- rep(1:N, each=2)
x <- sapply(1:length(idx), function(m) if(m %% 2 == 0) idx[m] + 0.5 else idx[m] - 0.5)
probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)
cred <- sapply(1:data$N, function(n) quantile(ncp_params$y_ppc[,n], probs=probs))
pad_cred <- do.call(cbind, lapply(idx, function(n) cred[1:9,n]))
plot(1, type="n", main="",
xlim=c(0.5, N + 0.5), xlab="",
ylim=c(min(pad_cred[1,]), max(pad_cred[9,])), ylab="Marginal Posteriors")
polygon(c(x, rev(x)), c(pad_cred[1,], rev(pad_cred[9,])),
col = c_light, border = NA)
polygon(c(x, rev(x)), c(pad_cred[2,], rev(pad_cred[8,])),
col = c_light_highlight, border = NA)
polygon(c(x, rev(x)), c(pad_cred[3,], rev(pad_cred[7,])),
col = c_mid, border = NA)
polygon(c(x, rev(x)), c(pad_cred[4,], rev(pad_cred[6,])),
col = c_mid_highlight, border = NA)
lines(x, pad_cred[5,], col=c_dark, lwd=2)
pad_obs <- do.call(cbind, lapply(idx, function(n) data$y[n]))
lines(x, pad_obs, lwd=1.5, col="white")
lines(x, pad_obs, lwd=1.25, col="black")
plot(ncp_params$theta[,1], log(ncp_params$tau),
col=c_dark_trans, pch=16, cex=0.8,
xlab="theta[1]", ylab="log(tau)")
points(div_params$theta[,1], log(div_params$tau),
col=c_light_trans, pch=16, cex=0.8)
points(cp_params$theta[,1], log(cp_params$tau),
col=c_light_trans, pch=16, cex=0.8)
points(cp_params$theta[,1], log(cp_params$tau),
col=c_light_trans, pch=16, cex=0.8)
c_light_trans <- c("#DCBCBC80")
c_dark_trans <- c("#8F272780")
c_green_trans <- c("#00FF0080")
points(cp_params$theta[,1], log(cp_params$tau),
col=c_light_trans, pch=16, cex=0.8)
